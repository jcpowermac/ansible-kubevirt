---
- include_tasks: template.yml

- name: Facts of localhost
  setup:
  delegate_to: localhost
  delegate_facts: True

- name: Create instance image directory
  file:
    path: "{{ images_path }}"
    state: directory
  become: True
  delegate_to: localhost

- name: list vms
  virt:
    name: "{{ inventory_hostname }}"
    command: status
  register: vm
  ignore_errors: True
  become: True
  delegate_to: localhost

- name: Copy image
  copy:
    src: "{{ qcow_image_path }}"
    dest: "{{ vm_image_path}}/{{ inventory_hostname }}.qcow2"
  become: True
  delegate_to: localhost
  when: vm | failed


- name: Create overlay disk
  command: "qemu-img create -f qcow2 {{ vm_image_path }}/{{ inventory_hostname }}-overlay.qcow2 32G"
  become: True
  delegate_to: localhost
  when: vm | failed

- name: virt-install
  command: >
    virt-install --import --name {{ inventory_hostname }}
    --memory {{ memory }}
    --vcpus {{ vcpus }}
    --disk path="{{ vm_image_path }}/{{ inventory_hostname }}.qcow2,format=qcow2,bus=virtio"
    --disk path="{{ vm_image_path }}/{{ inventory_hostname }}-overlay.qcow2,format=qcow2,bus=virtio"
    --network network=default
    --graphics none
    --console pty,target_type=serial
    --os-type linux
    --os-variant centos7.0
    --noautoconsole
  become: True
  delegate_to: localhost
  when: vm | failed

- name: pause
  pause:
    seconds: 15
  delegate_to: localhost
  when: vm | failed

- name: Shutdown VM
  virt:
    name: "{{ inventory_hostname }}"
    state: shutdown
  become: True
  delegate_to: localhost
  when: vm | failed

- name: Wait for Shutdown
  virt:
    name: "{{ inventory_hostname }}"
    command: status
  when: vm | failed
  register: vmstat
  until: vmstat.status.find("shutdown") != -1
  retries: 6
  delay: 10

- name: virt sysprep
  command: >
    virt-sysprep -d {{ inventory_hostname }}
    --hostname {{ inventory_hostname }}.{{ domain_name }}
    --ssh-inject root:file:{{ hostvars['localhost']['ansible_user_dir'] }}/.ssh/id_rsa.pub
    --root-password password:{{ ansible_password }}
    --network
  become: True
  environment:
    LIBGUESTFS_BACKEND: 'direct'
  delegate_to: localhost
  when: vm | failed

- name: enable nested
  command: "virt-xml {{ inventory_hostname }} --edit --cpu host-passthrough,require=vmx"
  become: True
  delegate_to: localhost
  when: vm | failed

- name: Poweron VM
  virt:
    name: "{{ inventory_hostname }}"
    state: running
  become: True
  delegate_to: localhost
  when: vm | failed

- name: ip address
  command: |
    virsh qemu-agent-command {{ inventory_hostname }}  '{"execute":"guest-network-get-interfaces"}'
  register: interfaces
  until: interfaces.rc == 0 and (interfaces.stdout | from_json).return[1]['ip-addresses'][0]['ip-address-type'] == "ipv4"
  retries: 6
  delay: 10
  ignore_errors: True
  become: True
  delegate_to: localhost

- set_fact:
    interface_json: "{{ interfaces.stdout | from_json }}"

- set_fact:
    ansible_host: "{{ interface_json.return[1]['ip-addresses'][0]['ip-address'] }}"
    ansible_connection: ssh
    ansible_port: 22
    ansible_ssh_pass: "{{ ansible_password }}"

